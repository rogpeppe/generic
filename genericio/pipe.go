// Code generated by go2go; DO NOT EDIT.


//line pipe.go2:8
package genericio

//line pipe.go2:8
import (
//line pipe.go2:8
 "bytes"
//line pipe.go2:8
 "crypto/sha1"
//line pipe.go2:8
 "errors"
//line pipe.go2:8
 "fmt"
//line pipe.go2:8
 "io"
//line pipe.go2:8
 "io/ioutil"
//line pipe.go2:8
 "runtime"
//line pipe.go2:8
 "sort"
//line pipe.go2:8
 "strings"
//line pipe.go2:8
 "sync"
//line pipe.go2:8
 "testing"
//line pipe.go2:8
 "time"
//line pipe.go2:8
)

//line pipe.go2:16
type onceError struct {
	sync.Mutex
	err error
}

func (a *onceError) Store(err error) {
	a.Mutex.Lock()
	defer a.Mutex.Unlock()
	if a.err != nil {
		return
	}
	a.err = err
}
func (a *onceError) Load() error {
	a.Mutex.Lock()
	defer a.Mutex.Unlock()
	return a.err
}

//line pipe.go2:36
var ErrClosedPipe = errors.New("io: read/write on closed pipe")

//line pipe.go2:36
type _ bytes.Buffer

//line pipe.go2:36
const _ = sha1.BlockSize

//line pipe.go2:36
var _ = errors.As
//line pipe.go2:36
var _ = fmt.Errorf

//line pipe.go2:36
type _ io.ByteReader

//line pipe.go2:36
var _ = ioutil.Discard
//line pipe.go2:36
var _ = runtime.BlockProfile

//line pipe.go2:36
type _ sort.Float64Slice
//line pipe.go2:36
type _ strings.Builder
//line pipe.go2:36
type _ sync.Cond

//line pipe.go2:36
var _ = testing.AllocsPerRun

//line pipe.go2:36
const _ = time.ANSIC
