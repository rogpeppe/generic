// Code generated by tuple/generate.go. DO NOT EDIT.

package tuplefunc

import (
	"context"

	"github.com/rogpeppe/generic/tuple"
)

// WithContextAR returns a function with a context argument that
// calls f without the context and returns its result.
func WithContextAR[A, R any](f func(A) R) func(context.Context, A) R {
	return func(ctx context.Context, a A) R {
		return f(a)
	}
}

// WithContext returns a function with a context argument
// that calls f without the context.
func WithContextA[A any](f func(A)) func(context.Context, A) {
	return func(ctx context.Context, a A) {
		f(a)
	}
}

// WithErrorAR returns an error-returning function that
// calls f and returns a nil error.
func WithErrorAR[A, R any](f func(A) R) func(A) (R, error) {
	return func(a A) (R, error) {
		return f(a), nil
	}
}

// ToA_0 returns a single-argument function that calls f.
func ToA_0(f func()) func(tuple.T0) {
	return func(a tuple.T0) {
		f()
	}
}

// ToA_2 returns a single-argument function that calls f.
func ToA_2[A0, A1 any](f func(a0 A0, a1 A1)) func(tuple.T2[A0, A1]) {
	return func(a tuple.T2[A0, A1]) {
		f(a.T())
	}
}

// ToA_3 returns a single-argument function that calls f.
func ToA_3[A0, A1, A2 any](f func(a0 A0, a1 A1, a2 A2)) func(tuple.T3[A0, A1, A2]) {
	return func(a tuple.T3[A0, A1, A2]) {
		f(a.T())
	}
}

// ToA_4 returns a single-argument function that calls f.
func ToA_4[A0, A1, A2, A3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3)) func(tuple.T4[A0, A1, A2, A3]) {
	return func(a tuple.T4[A0, A1, A2, A3]) {
		f(a.T())
	}
}

// ToA_5 returns a single-argument function that calls f.
func ToA_5[A0, A1, A2, A3, A4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4)) func(tuple.T5[A0, A1, A2, A3, A4]) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) {
		f(a.T())
	}
}

// ToA_6 returns a single-argument function that calls f.
func ToA_6[A0, A1, A2, A3, A4, A5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) {
		f(a.T())
	}
}

// ToR_0 returns a single-return function that calls f.
func ToR_0(f func()) func() tuple.T0 {
	return func() tuple.T0 {
		f()
		return struct{}{}
	}
}

// ToR_2 returns a single-return function that calls f.
func ToR_2[R0, R1 any](f func() (R0, R1)) func() tuple.T2[R0, R1] {
	return func() tuple.T2[R0, R1] {
		return tuple.MkT2(f())
	}
}

// ToR_3 returns a single-return function that calls f.
func ToR_3[R0, R1, R2 any](f func() (R0, R1, R2)) func() tuple.T3[R0, R1, R2] {
	return func() tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f())
	}
}

// ToR_4 returns a single-return function that calls f.
func ToR_4[R0, R1, R2, R3 any](f func() (R0, R1, R2, R3)) func() tuple.T4[R0, R1, R2, R3] {
	return func() tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f())
	}
}

// ToR_5 returns a single-return function that calls f.
func ToR_5[R0, R1, R2, R3, R4 any](f func() (R0, R1, R2, R3, R4)) func() tuple.T5[R0, R1, R2, R3, R4] {
	return func() tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f())
	}
}

// ToR_6 returns a single-return function that calls f.
func ToR_6[R0, R1, R2, R3, R4, R5 any](f func() (R0, R1, R2, R3, R4, R5)) func() tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func() tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f())
	}
}

// ToAR_0_0 returns a single-argument, single-return function that calls f.
func ToAR_0_0(f func()) func(tuple.T0) tuple.T0 {
	return func(a tuple.T0) tuple.T0 {
		f()
		return struct{}{}
	}
}

// ToAR_0_1 returns a single-argument, single-return function that calls f.
func ToAR_0_1[R any](f func() R) func(tuple.T0) R {
	return func(a tuple.T0) R {
		return f()
	}
}

// ToAR_0_2 returns a single-argument, single-return function that calls f.
func ToAR_0_2[R0, R1 any](f func() (R0, R1)) func(tuple.T0) tuple.T2[R0, R1] {
	return func(a tuple.T0) tuple.T2[R0, R1] {
		return tuple.MkT2(f())
	}
}

// ToAR_0_3 returns a single-argument, single-return function that calls f.
func ToAR_0_3[R0, R1, R2 any](f func() (R0, R1, R2)) func(tuple.T0) tuple.T3[R0, R1, R2] {
	return func(a tuple.T0) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f())
	}
}

// ToAR_0_4 returns a single-argument, single-return function that calls f.
func ToAR_0_4[R0, R1, R2, R3 any](f func() (R0, R1, R2, R3)) func(tuple.T0) tuple.T4[R0, R1, R2, R3] {
	return func(a tuple.T0) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f())
	}
}

// ToAR_0_5 returns a single-argument, single-return function that calls f.
func ToAR_0_5[R0, R1, R2, R3, R4 any](f func() (R0, R1, R2, R3, R4)) func(tuple.T0) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a tuple.T0) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f())
	}
}

// ToAR_0_6 returns a single-argument, single-return function that calls f.
func ToAR_0_6[R0, R1, R2, R3, R4, R5 any](f func() (R0, R1, R2, R3, R4, R5)) func(tuple.T0) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a tuple.T0) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f())
	}
}

// ToAR_1_0 returns a single-argument, single-return function that calls f.
func ToAR_1_0[A any](f func(a A)) func(A) tuple.T0 {
	return func(a A) tuple.T0 {
		f(a)
		return struct{}{}
	}
}

// ToAR_1_1 returns a single-argument, single-return function that calls f.
func ToAR_1_1[A, R any](f func(a A) R) func(A) R {
	return func(a A) R {
		return f(a)
	}
}

// ToAR_1_2 returns a single-argument, single-return function that calls f.
func ToAR_1_2[A, R0, R1 any](f func(a A) (R0, R1)) func(A) tuple.T2[R0, R1] {
	return func(a A) tuple.T2[R0, R1] {
		return tuple.MkT2(f(a))
	}
}

// ToAR_1_3 returns a single-argument, single-return function that calls f.
func ToAR_1_3[A, R0, R1, R2 any](f func(a A) (R0, R1, R2)) func(A) tuple.T3[R0, R1, R2] {
	return func(a A) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f(a))
	}
}

// ToAR_1_4 returns a single-argument, single-return function that calls f.
func ToAR_1_4[A, R0, R1, R2, R3 any](f func(a A) (R0, R1, R2, R3)) func(A) tuple.T4[R0, R1, R2, R3] {
	return func(a A) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f(a))
	}
}

// ToAR_1_5 returns a single-argument, single-return function that calls f.
func ToAR_1_5[A, R0, R1, R2, R3, R4 any](f func(a A) (R0, R1, R2, R3, R4)) func(A) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a A) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f(a))
	}
}

// ToAR_1_6 returns a single-argument, single-return function that calls f.
func ToAR_1_6[A, R0, R1, R2, R3, R4, R5 any](f func(a A) (R0, R1, R2, R3, R4, R5)) func(A) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a A) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f(a))
	}
}

// ToAR_2_0 returns a single-argument, single-return function that calls f.
func ToAR_2_0[A0, A1 any](f func(a0 A0, a1 A1)) func(tuple.T2[A0, A1]) tuple.T0 {
	return func(a tuple.T2[A0, A1]) tuple.T0 {
		f(a.T())
		return struct{}{}
	}
}

// ToAR_2_1 returns a single-argument, single-return function that calls f.
func ToAR_2_1[A0, A1, R any](f func(a0 A0, a1 A1) R) func(tuple.T2[A0, A1]) R {
	return func(a tuple.T2[A0, A1]) R {
		return f(a.T())
	}
}

// ToAR_2_2 returns a single-argument, single-return function that calls f.
func ToAR_2_2[A0, A1, R0, R1 any](f func(a0 A0, a1 A1) (R0, R1)) func(tuple.T2[A0, A1]) tuple.T2[R0, R1] {
	return func(a tuple.T2[A0, A1]) tuple.T2[R0, R1] {
		return tuple.MkT2(f(a.T()))
	}
}

// ToAR_2_3 returns a single-argument, single-return function that calls f.
func ToAR_2_3[A0, A1, R0, R1, R2 any](f func(a0 A0, a1 A1) (R0, R1, R2)) func(tuple.T2[A0, A1]) tuple.T3[R0, R1, R2] {
	return func(a tuple.T2[A0, A1]) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f(a.T()))
	}
}

// ToAR_2_4 returns a single-argument, single-return function that calls f.
func ToAR_2_4[A0, A1, R0, R1, R2, R3 any](f func(a0 A0, a1 A1) (R0, R1, R2, R3)) func(tuple.T2[A0, A1]) tuple.T4[R0, R1, R2, R3] {
	return func(a tuple.T2[A0, A1]) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f(a.T()))
	}
}

// ToAR_2_5 returns a single-argument, single-return function that calls f.
func ToAR_2_5[A0, A1, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1) (R0, R1, R2, R3, R4)) func(tuple.T2[A0, A1]) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a tuple.T2[A0, A1]) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f(a.T()))
	}
}

// ToAR_2_6 returns a single-argument, single-return function that calls f.
func ToAR_2_6[A0, A1, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1) (R0, R1, R2, R3, R4, R5)) func(tuple.T2[A0, A1]) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a tuple.T2[A0, A1]) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f(a.T()))
	}
}

// ToAR_3_0 returns a single-argument, single-return function that calls f.
func ToAR_3_0[A0, A1, A2 any](f func(a0 A0, a1 A1, a2 A2)) func(tuple.T3[A0, A1, A2]) tuple.T0 {
	return func(a tuple.T3[A0, A1, A2]) tuple.T0 {
		f(a.T())
		return struct{}{}
	}
}

// ToAR_3_1 returns a single-argument, single-return function that calls f.
func ToAR_3_1[A0, A1, A2, R any](f func(a0 A0, a1 A1, a2 A2) R) func(tuple.T3[A0, A1, A2]) R {
	return func(a tuple.T3[A0, A1, A2]) R {
		return f(a.T())
	}
}

// ToAR_3_2 returns a single-argument, single-return function that calls f.
func ToAR_3_2[A0, A1, A2, R0, R1 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1)) func(tuple.T3[A0, A1, A2]) tuple.T2[R0, R1] {
	return func(a tuple.T3[A0, A1, A2]) tuple.T2[R0, R1] {
		return tuple.MkT2(f(a.T()))
	}
}

// ToAR_3_3 returns a single-argument, single-return function that calls f.
func ToAR_3_3[A0, A1, A2, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2)) func(tuple.T3[A0, A1, A2]) tuple.T3[R0, R1, R2] {
	return func(a tuple.T3[A0, A1, A2]) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f(a.T()))
	}
}

// ToAR_3_4 returns a single-argument, single-return function that calls f.
func ToAR_3_4[A0, A1, A2, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3)) func(tuple.T3[A0, A1, A2]) tuple.T4[R0, R1, R2, R3] {
	return func(a tuple.T3[A0, A1, A2]) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f(a.T()))
	}
}

// ToAR_3_5 returns a single-argument, single-return function that calls f.
func ToAR_3_5[A0, A1, A2, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, R4)) func(tuple.T3[A0, A1, A2]) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a tuple.T3[A0, A1, A2]) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f(a.T()))
	}
}

// ToAR_3_6 returns a single-argument, single-return function that calls f.
func ToAR_3_6[A0, A1, A2, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, R4, R5)) func(tuple.T3[A0, A1, A2]) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a tuple.T3[A0, A1, A2]) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f(a.T()))
	}
}

// ToAR_4_0 returns a single-argument, single-return function that calls f.
func ToAR_4_0[A0, A1, A2, A3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3)) func(tuple.T4[A0, A1, A2, A3]) tuple.T0 {
	return func(a tuple.T4[A0, A1, A2, A3]) tuple.T0 {
		f(a.T())
		return struct{}{}
	}
}

// ToAR_4_1 returns a single-argument, single-return function that calls f.
func ToAR_4_1[A0, A1, A2, A3, R any](f func(a0 A0, a1 A1, a2 A2, a3 A3) R) func(tuple.T4[A0, A1, A2, A3]) R {
	return func(a tuple.T4[A0, A1, A2, A3]) R {
		return f(a.T())
	}
}

// ToAR_4_2 returns a single-argument, single-return function that calls f.
func ToAR_4_2[A0, A1, A2, A3, R0, R1 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1)) func(tuple.T4[A0, A1, A2, A3]) tuple.T2[R0, R1] {
	return func(a tuple.T4[A0, A1, A2, A3]) tuple.T2[R0, R1] {
		return tuple.MkT2(f(a.T()))
	}
}

// ToAR_4_3 returns a single-argument, single-return function that calls f.
func ToAR_4_3[A0, A1, A2, A3, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2)) func(tuple.T4[A0, A1, A2, A3]) tuple.T3[R0, R1, R2] {
	return func(a tuple.T4[A0, A1, A2, A3]) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f(a.T()))
	}
}

// ToAR_4_4 returns a single-argument, single-return function that calls f.
func ToAR_4_4[A0, A1, A2, A3, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3)) func(tuple.T4[A0, A1, A2, A3]) tuple.T4[R0, R1, R2, R3] {
	return func(a tuple.T4[A0, A1, A2, A3]) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f(a.T()))
	}
}

// ToAR_4_5 returns a single-argument, single-return function that calls f.
func ToAR_4_5[A0, A1, A2, A3, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, R4)) func(tuple.T4[A0, A1, A2, A3]) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a tuple.T4[A0, A1, A2, A3]) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f(a.T()))
	}
}

// ToAR_4_6 returns a single-argument, single-return function that calls f.
func ToAR_4_6[A0, A1, A2, A3, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, R4, R5)) func(tuple.T4[A0, A1, A2, A3]) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a tuple.T4[A0, A1, A2, A3]) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f(a.T()))
	}
}

// ToAR_5_0 returns a single-argument, single-return function that calls f.
func ToAR_5_0[A0, A1, A2, A3, A4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4)) func(tuple.T5[A0, A1, A2, A3, A4]) tuple.T0 {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) tuple.T0 {
		f(a.T())
		return struct{}{}
	}
}

// ToAR_5_1 returns a single-argument, single-return function that calls f.
func ToAR_5_1[A0, A1, A2, A3, A4, R any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) R) func(tuple.T5[A0, A1, A2, A3, A4]) R {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) R {
		return f(a.T())
	}
}

// ToAR_5_2 returns a single-argument, single-return function that calls f.
func ToAR_5_2[A0, A1, A2, A3, A4, R0, R1 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1)) func(tuple.T5[A0, A1, A2, A3, A4]) tuple.T2[R0, R1] {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) tuple.T2[R0, R1] {
		return tuple.MkT2(f(a.T()))
	}
}

// ToAR_5_3 returns a single-argument, single-return function that calls f.
func ToAR_5_3[A0, A1, A2, A3, A4, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2)) func(tuple.T5[A0, A1, A2, A3, A4]) tuple.T3[R0, R1, R2] {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f(a.T()))
	}
}

// ToAR_5_4 returns a single-argument, single-return function that calls f.
func ToAR_5_4[A0, A1, A2, A3, A4, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3)) func(tuple.T5[A0, A1, A2, A3, A4]) tuple.T4[R0, R1, R2, R3] {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f(a.T()))
	}
}

// ToAR_5_5 returns a single-argument, single-return function that calls f.
func ToAR_5_5[A0, A1, A2, A3, A4, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, R4)) func(tuple.T5[A0, A1, A2, A3, A4]) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f(a.T()))
	}
}

// ToAR_5_6 returns a single-argument, single-return function that calls f.
func ToAR_5_6[A0, A1, A2, A3, A4, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, R4, R5)) func(tuple.T5[A0, A1, A2, A3, A4]) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f(a.T()))
	}
}

// ToAR_6_0 returns a single-argument, single-return function that calls f.
func ToAR_6_0[A0, A1, A2, A3, A4, A5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T0 {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T0 {
		f(a.T())
		return struct{}{}
	}
}

// ToAR_6_1 returns a single-argument, single-return function that calls f.
func ToAR_6_1[A0, A1, A2, A3, A4, A5, R any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) R) func(tuple.T6[A0, A1, A2, A3, A4, A5]) R {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) R {
		return f(a.T())
	}
}

// ToAR_6_2 returns a single-argument, single-return function that calls f.
func ToAR_6_2[A0, A1, A2, A3, A4, A5, R0, R1 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T2[R0, R1] {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T2[R0, R1] {
		return tuple.MkT2(f(a.T()))
	}
}

// ToAR_6_3 returns a single-argument, single-return function that calls f.
func ToAR_6_3[A0, A1, A2, A3, A4, A5, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T3[R0, R1, R2] {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T3[R0, R1, R2] {
		return tuple.MkT3(f(a.T()))
	}
}

// ToAR_6_4 returns a single-argument, single-return function that calls f.
func ToAR_6_4[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T4[R0, R1, R2, R3] {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T4[R0, R1, R2, R3] {
		return tuple.MkT4(f(a.T()))
	}
}

// ToAR_6_5 returns a single-argument, single-return function that calls f.
func ToAR_6_5[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, R4)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T5[R0, R1, R2, R3, R4] {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T5[R0, R1, R2, R3, R4] {
		return tuple.MkT5(f(a.T()))
	}
}

// ToAR_6_6 returns a single-argument, single-return function that calls f.
func ToAR_6_6[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, R4, R5)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T6[R0, R1, R2, R3, R4, R5] {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) tuple.T6[R0, R1, R2, R3, R4, R5] {
		return tuple.MkT6(f(a.T()))
	}
}

// ToAE_0 returns a single-argument function that calls f.
func ToAE_0(f func() error) func(tuple.T0) error {
	return func(a tuple.T0) error {
		return f()
	}
}

// ToAE_2 returns a single-argument function that calls f.
func ToAE_2[A0, A1 any](f func(a0 A0, a1 A1) error) func(tuple.T2[A0, A1]) error {
	return func(a tuple.T2[A0, A1]) error {
		return f(a.T())
	}
}

// ToAE_3 returns a single-argument function that calls f.
func ToAE_3[A0, A1, A2 any](f func(a0 A0, a1 A1, a2 A2) error) func(tuple.T3[A0, A1, A2]) error {
	return func(a tuple.T3[A0, A1, A2]) error {
		return f(a.T())
	}
}

// ToAE_4 returns a single-argument function that calls f.
func ToAE_4[A0, A1, A2, A3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) error) func(tuple.T4[A0, A1, A2, A3]) error {
	return func(a tuple.T4[A0, A1, A2, A3]) error {
		return f(a.T())
	}
}

// ToAE_5 returns a single-argument function that calls f.
func ToAE_5[A0, A1, A2, A3, A4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) error) func(tuple.T5[A0, A1, A2, A3, A4]) error {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) error {
		return f(a.T())
	}
}

// ToAE_6 returns a single-argument function that calls f.
func ToAE_6[A0, A1, A2, A3, A4, A5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) error) func(tuple.T6[A0, A1, A2, A3, A4, A5]) error {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) error {
		return f(a.T())
	}
}

// ToARE_0_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_0(f func() error) func(tuple.T0) (tuple.T0, error) {
	return func(a tuple.T0) (tuple.T0, error) {
		err := f()
		return struct{}{}, err
	}
}

// ToARE_0_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_1[R any](f func() (R, error)) func(tuple.T0) (R, error) {
	return func(a tuple.T0) (R, error) {
		return f()
	}
}

// ToARE_0_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_2[R0, R1 any](f func() (R0, R1, error)) func(tuple.T0) (tuple.T2[R0, R1], error) {
	return func(a tuple.T0) (tuple.T2[R0, R1], error) {
		r0, r1, err := f()
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_0_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_3[R0, R1, R2 any](f func() (R0, R1, R2, error)) func(tuple.T0) (tuple.T3[R0, R1, R2], error) {
	return func(a tuple.T0) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f()
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_0_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_4[R0, R1, R2, R3 any](f func() (R0, R1, R2, R3, error)) func(tuple.T0) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a tuple.T0) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f()
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_0_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_5[R0, R1, R2, R3, R4 any](f func() (R0, R1, R2, R3, R4, error)) func(tuple.T0) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a tuple.T0) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f()
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_0_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_0_6[R0, R1, R2, R3, R4, R5 any](f func() (R0, R1, R2, R3, R4, R5, error)) func(tuple.T0) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a tuple.T0) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f()
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToARE_1_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_0[A any](f func(a A) error) func(A) (tuple.T0, error) {
	return func(a A) (tuple.T0, error) {
		err := f(a)
		return struct{}{}, err
	}
}

// ToARE_1_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_1[A, R any](f func(a A) (R, error)) func(A) (R, error) {
	return func(a A) (R, error) {
		return f(a)
	}
}

// ToARE_1_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_2[A, R0, R1 any](f func(a A) (R0, R1, error)) func(A) (tuple.T2[R0, R1], error) {
	return func(a A) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(a)
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_1_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_3[A, R0, R1, R2 any](f func(a A) (R0, R1, R2, error)) func(A) (tuple.T3[R0, R1, R2], error) {
	return func(a A) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(a)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_1_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_4[A, R0, R1, R2, R3 any](f func(a A) (R0, R1, R2, R3, error)) func(A) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a A) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(a)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_1_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_5[A, R0, R1, R2, R3, R4 any](f func(a A) (R0, R1, R2, R3, R4, error)) func(A) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a A) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(a)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_1_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_1_6[A, R0, R1, R2, R3, R4, R5 any](f func(a A) (R0, R1, R2, R3, R4, R5, error)) func(A) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a A) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(a)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToARE_2_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_0[A0, A1 any](f func(a0 A0, a1 A1) error) func(tuple.T2[A0, A1]) (tuple.T0, error) {
	return func(a tuple.T2[A0, A1]) (tuple.T0, error) {
		err := f(a.T())
		return struct{}{}, err
	}
}

// ToARE_2_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_1[A0, A1, R any](f func(a0 A0, a1 A1) (R, error)) func(tuple.T2[A0, A1]) (R, error) {
	return func(a tuple.T2[A0, A1]) (R, error) {
		return f(a.T())
	}
}

// ToARE_2_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_2[A0, A1, R0, R1 any](f func(a0 A0, a1 A1) (R0, R1, error)) func(tuple.T2[A0, A1]) (tuple.T2[R0, R1], error) {
	return func(a tuple.T2[A0, A1]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(a.T())
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_2_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_3[A0, A1, R0, R1, R2 any](f func(a0 A0, a1 A1) (R0, R1, R2, error)) func(tuple.T2[A0, A1]) (tuple.T3[R0, R1, R2], error) {
	return func(a tuple.T2[A0, A1]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(a.T())
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_2_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_4[A0, A1, R0, R1, R2, R3 any](f func(a0 A0, a1 A1) (R0, R1, R2, R3, error)) func(tuple.T2[A0, A1]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a tuple.T2[A0, A1]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(a.T())
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_2_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_5[A0, A1, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1) (R0, R1, R2, R3, R4, error)) func(tuple.T2[A0, A1]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a tuple.T2[A0, A1]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(a.T())
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_2_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_2_6[A0, A1, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1) (R0, R1, R2, R3, R4, R5, error)) func(tuple.T2[A0, A1]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a tuple.T2[A0, A1]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(a.T())
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToARE_3_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_0[A0, A1, A2 any](f func(a0 A0, a1 A1, a2 A2) error) func(tuple.T3[A0, A1, A2]) (tuple.T0, error) {
	return func(a tuple.T3[A0, A1, A2]) (tuple.T0, error) {
		err := f(a.T())
		return struct{}{}, err
	}
}

// ToARE_3_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_1[A0, A1, A2, R any](f func(a0 A0, a1 A1, a2 A2) (R, error)) func(tuple.T3[A0, A1, A2]) (R, error) {
	return func(a tuple.T3[A0, A1, A2]) (R, error) {
		return f(a.T())
	}
}

// ToARE_3_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_2[A0, A1, A2, R0, R1 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, error)) func(tuple.T3[A0, A1, A2]) (tuple.T2[R0, R1], error) {
	return func(a tuple.T3[A0, A1, A2]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(a.T())
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_3_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_3[A0, A1, A2, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, error)) func(tuple.T3[A0, A1, A2]) (tuple.T3[R0, R1, R2], error) {
	return func(a tuple.T3[A0, A1, A2]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(a.T())
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_3_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_4[A0, A1, A2, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, error)) func(tuple.T3[A0, A1, A2]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a tuple.T3[A0, A1, A2]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(a.T())
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_3_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_5[A0, A1, A2, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, R4, error)) func(tuple.T3[A0, A1, A2]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a tuple.T3[A0, A1, A2]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(a.T())
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_3_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_3_6[A0, A1, A2, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, R4, R5, error)) func(tuple.T3[A0, A1, A2]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a tuple.T3[A0, A1, A2]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(a.T())
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToARE_4_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_0[A0, A1, A2, A3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) error) func(tuple.T4[A0, A1, A2, A3]) (tuple.T0, error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (tuple.T0, error) {
		err := f(a.T())
		return struct{}{}, err
	}
}

// ToARE_4_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_1[A0, A1, A2, A3, R any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R, error)) func(tuple.T4[A0, A1, A2, A3]) (R, error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (R, error) {
		return f(a.T())
	}
}

// ToARE_4_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_2[A0, A1, A2, A3, R0, R1 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, error)) func(tuple.T4[A0, A1, A2, A3]) (tuple.T2[R0, R1], error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(a.T())
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_4_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_3[A0, A1, A2, A3, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, error)) func(tuple.T4[A0, A1, A2, A3]) (tuple.T3[R0, R1, R2], error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(a.T())
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_4_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_4[A0, A1, A2, A3, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, error)) func(tuple.T4[A0, A1, A2, A3]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(a.T())
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_4_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_5[A0, A1, A2, A3, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, R4, error)) func(tuple.T4[A0, A1, A2, A3]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(a.T())
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_4_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_4_6[A0, A1, A2, A3, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, R4, R5, error)) func(tuple.T4[A0, A1, A2, A3]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a tuple.T4[A0, A1, A2, A3]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(a.T())
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToARE_5_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_0[A0, A1, A2, A3, A4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) error) func(tuple.T5[A0, A1, A2, A3, A4]) (tuple.T0, error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T0, error) {
		err := f(a.T())
		return struct{}{}, err
	}
}

// ToARE_5_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_1[A0, A1, A2, A3, A4, R any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R, error)) func(tuple.T5[A0, A1, A2, A3, A4]) (R, error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (R, error) {
		return f(a.T())
	}
}

// ToARE_5_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_2[A0, A1, A2, A3, A4, R0, R1 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, error)) func(tuple.T5[A0, A1, A2, A3, A4]) (tuple.T2[R0, R1], error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(a.T())
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_5_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_3[A0, A1, A2, A3, A4, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, error)) func(tuple.T5[A0, A1, A2, A3, A4]) (tuple.T3[R0, R1, R2], error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(a.T())
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_5_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_4[A0, A1, A2, A3, A4, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, error)) func(tuple.T5[A0, A1, A2, A3, A4]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(a.T())
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_5_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_5[A0, A1, A2, A3, A4, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, R4, error)) func(tuple.T5[A0, A1, A2, A3, A4]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(a.T())
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_5_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_5_6[A0, A1, A2, A3, A4, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, R4, R5, error)) func(tuple.T5[A0, A1, A2, A3, A4]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(a.T())
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToARE_6_0 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_0[A0, A1, A2, A3, A4, A5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) error) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T0, error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T0, error) {
		err := f(a.T())
		return struct{}{}, err
	}
}

// ToARE_6_1 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_1[A0, A1, A2, A3, A4, A5, R any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R, error)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (R, error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (R, error) {
		return f(a.T())
	}
}

// ToARE_6_2 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_2[A0, A1, A2, A3, A4, A5, R0, R1 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, error)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T2[R0, R1], error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(a.T())
		return tuple.MkT2(r0, r1), err
	}
}

// ToARE_6_3 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_3[A0, A1, A2, A3, A4, A5, R0, R1, R2 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, error)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T3[R0, R1, R2], error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(a.T())
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToARE_6_4 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_4[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, error)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(a.T())
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToARE_6_5 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_5[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3, R4 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, R4, error)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(a.T())
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToARE_6_6 returns a single-argument, single-return-with-error function that calls f.
func ToARE_6_6[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3, R4, R5 any](f func(a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, R4, R5, error)) func(tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(a.T())
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToRE_0 returns a single-return-with-error function that calls f.
func ToRE_0(f func() error) func() (tuple.T0, error) {
	return func() (tuple.T0, error) {
		err := f()
		return struct{}{}, err
	}
}

// ToRE_2 returns a single-return-with-error function that calls f.
func ToRE_2[R0, R1 any](f func() (R0, R1, error)) func() (tuple.T2[R0, R1], error) {
	return func() (tuple.T2[R0, R1], error) {
		r0, r1, err := f()
		return tuple.MkT2(r0, r1), err
	}
}

// ToRE_3 returns a single-return-with-error function that calls f.
func ToRE_3[R0, R1, R2 any](f func() (R0, R1, R2, error)) func() (tuple.T3[R0, R1, R2], error) {
	return func() (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f()
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToRE_4 returns a single-return-with-error function that calls f.
func ToRE_4[R0, R1, R2, R3 any](f func() (R0, R1, R2, R3, error)) func() (tuple.T4[R0, R1, R2, R3], error) {
	return func() (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f()
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToRE_5 returns a single-return-with-error function that calls f.
func ToRE_5[R0, R1, R2, R3, R4 any](f func() (R0, R1, R2, R3, R4, error)) func() (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func() (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f()
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToRE_6 returns a single-return-with-error function that calls f.
func ToRE_6[R0, R1, R2, R3, R4, R5 any](f func() (R0, R1, R2, R3, R4, R5, error)) func() (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func() (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f()
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// FromRE_0 returns a function that returns 0 parameters and an error that calls f.
func FromRE_0(f func() (tuple.T0, error)) func() error {
	return func() error {
		_, err := f()
		return err
	}
}

// FromRE_2 returns a function that returns 2 parameters and an error that calls f.
func FromRE_2[R0, R1 any](f func() (tuple.T2[R0, R1], error)) func() (R0, R1, error) {
	return func() (R0, R1, error) {
		t, err := f()
		r0, r1 := t.T()
		return r0, r1, err
	}
}

// FromRE_3 returns a function that returns 3 parameters and an error that calls f.
func FromRE_3[R0, R1, R2 any](f func() (tuple.T3[R0, R1, R2], error)) func() (R0, R1, R2, error) {
	return func() (R0, R1, R2, error) {
		t, err := f()
		r0, r1, r2 := t.T()
		return r0, r1, r2, err
	}
}

// FromRE_4 returns a function that returns 4 parameters and an error that calls f.
func FromRE_4[R0, R1, R2, R3 any](f func() (tuple.T4[R0, R1, R2, R3], error)) func() (R0, R1, R2, R3, error) {
	return func() (R0, R1, R2, R3, error) {
		t, err := f()
		r0, r1, r2, r3 := t.T()
		return r0, r1, r2, r3, err
	}
}

// FromRE_5 returns a function that returns 5 parameters and an error that calls f.
func FromRE_5[R0, R1, R2, R3, R4 any](f func() (tuple.T5[R0, R1, R2, R3, R4], error)) func() (R0, R1, R2, R3, R4, error) {
	return func() (R0, R1, R2, R3, R4, error) {
		t, err := f()
		r0, r1, r2, r3, r4 := t.T()
		return r0, r1, r2, r3, r4, err
	}
}

// FromRE_6 returns a function that returns 6 parameters and an error that calls f.
func FromRE_6[R0, R1, R2, R3, R4, R5 any](f func() (tuple.T6[R0, R1, R2, R3, R4, R5], error)) func() (R0, R1, R2, R3, R4, R5, error) {
	return func() (R0, R1, R2, R3, R4, R5, error) {
		t, err := f()
		r0, r1, r2, r3, r4, r5 := t.T()
		return r0, r1, r2, r3, r4, r5, err
	}
}

// ToCARE_0_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_0(f func(ctx context.Context) error) func(context.Context, tuple.T0) (tuple.T0, error) {
	return func(ctx context.Context, a tuple.T0) (tuple.T0, error) {
		err := f(ctx)
		return struct{}{}, err
	}
}

// ToCARE_0_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_1[R any](f func(ctx context.Context) (R, error)) func(context.Context, tuple.T0) (R, error) {
	return func(ctx context.Context, a tuple.T0) (R, error) {
		return f(ctx)
	}
}

// ToCARE_0_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_2[R0, R1 any](f func(ctx context.Context) (R0, R1, error)) func(context.Context, tuple.T0) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a tuple.T0) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_0_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_3[R0, R1, R2 any](f func(ctx context.Context) (R0, R1, R2, error)) func(context.Context, tuple.T0) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a tuple.T0) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_0_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_4[R0, R1, R2, R3 any](f func(ctx context.Context) (R0, R1, R2, R3, error)) func(context.Context, tuple.T0) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a tuple.T0) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_0_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_5[R0, R1, R2, R3, R4 any](f func(ctx context.Context) (R0, R1, R2, R3, R4, error)) func(context.Context, tuple.T0) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a tuple.T0) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_0_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_0_6[R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, tuple.T0) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a tuple.T0) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToCARE_1_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_0[A any](f func(ctx context.Context, a A) error) func(context.Context, A) (tuple.T0, error) {
	return func(ctx context.Context, a A) (tuple.T0, error) {
		err := f(ctx, a)
		return struct{}{}, err
	}
}

// ToCARE_1_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_1[A, R any](f func(ctx context.Context, a A) (R, error)) func(context.Context, A) (R, error) {
	return func(ctx context.Context, a A) (R, error) {
		return f(ctx, a)
	}
}

// ToCARE_1_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_2[A, R0, R1 any](f func(ctx context.Context, a A) (R0, R1, error)) func(context.Context, A) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a A) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx, a)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_1_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_3[A, R0, R1, R2 any](f func(ctx context.Context, a A) (R0, R1, R2, error)) func(context.Context, A) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a A) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx, a)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_1_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_4[A, R0, R1, R2, R3 any](f func(ctx context.Context, a A) (R0, R1, R2, R3, error)) func(context.Context, A) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a A) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx, a)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_1_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_5[A, R0, R1, R2, R3, R4 any](f func(ctx context.Context, a A) (R0, R1, R2, R3, R4, error)) func(context.Context, A) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a A) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx, a)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_1_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_1_6[A, R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context, a A) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, A) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a A) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx, a)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToCARE_2_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_0[A0, A1 any](f func(ctx context.Context, a0 A0, a1 A1) error) func(context.Context, tuple.T2[A0, A1]) (tuple.T0, error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (tuple.T0, error) {
		err := f(ctx, a.A0, a.A1)
		return struct{}{}, err
	}
}

// ToCARE_2_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_1[A0, A1, R any](f func(ctx context.Context, a0 A0, a1 A1) (R, error)) func(context.Context, tuple.T2[A0, A1]) (R, error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (R, error) {
		return f(ctx, a.A0, a.A1)
	}
}

// ToCARE_2_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_2[A0, A1, R0, R1 any](f func(ctx context.Context, a0 A0, a1 A1) (R0, R1, error)) func(context.Context, tuple.T2[A0, A1]) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx, a.A0, a.A1)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_2_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_3[A0, A1, R0, R1, R2 any](f func(ctx context.Context, a0 A0, a1 A1) (R0, R1, R2, error)) func(context.Context, tuple.T2[A0, A1]) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx, a.A0, a.A1)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_2_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_4[A0, A1, R0, R1, R2, R3 any](f func(ctx context.Context, a0 A0, a1 A1) (R0, R1, R2, R3, error)) func(context.Context, tuple.T2[A0, A1]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx, a.A0, a.A1)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_2_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_5[A0, A1, R0, R1, R2, R3, R4 any](f func(ctx context.Context, a0 A0, a1 A1) (R0, R1, R2, R3, R4, error)) func(context.Context, tuple.T2[A0, A1]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx, a.A0, a.A1)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_2_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_2_6[A0, A1, R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context, a0 A0, a1 A1) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, tuple.T2[A0, A1]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a tuple.T2[A0, A1]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx, a.A0, a.A1)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToCARE_3_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_0[A0, A1, A2 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) error) func(context.Context, tuple.T3[A0, A1, A2]) (tuple.T0, error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (tuple.T0, error) {
		err := f(ctx, a.A0, a.A1, a.A2)
		return struct{}{}, err
	}
}

// ToCARE_3_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_1[A0, A1, A2, R any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) (R, error)) func(context.Context, tuple.T3[A0, A1, A2]) (R, error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (R, error) {
		return f(ctx, a.A0, a.A1, a.A2)
	}
}

// ToCARE_3_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_2[A0, A1, A2, R0, R1 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) (R0, R1, error)) func(context.Context, tuple.T3[A0, A1, A2]) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx, a.A0, a.A1, a.A2)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_3_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_3[A0, A1, A2, R0, R1, R2 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) (R0, R1, R2, error)) func(context.Context, tuple.T3[A0, A1, A2]) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx, a.A0, a.A1, a.A2)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_3_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_4[A0, A1, A2, R0, R1, R2, R3 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, error)) func(context.Context, tuple.T3[A0, A1, A2]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx, a.A0, a.A1, a.A2)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_3_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_5[A0, A1, A2, R0, R1, R2, R3, R4 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, R4, error)) func(context.Context, tuple.T3[A0, A1, A2]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx, a.A0, a.A1, a.A2)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_3_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_3_6[A0, A1, A2, R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, tuple.T3[A0, A1, A2]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a tuple.T3[A0, A1, A2]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx, a.A0, a.A1, a.A2)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToCARE_4_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_0[A0, A1, A2, A3 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) error) func(context.Context, tuple.T4[A0, A1, A2, A3]) (tuple.T0, error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (tuple.T0, error) {
		err := f(ctx, a.A0, a.A1, a.A2, a.A3)
		return struct{}{}, err
	}
}

// ToCARE_4_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_1[A0, A1, A2, A3, R any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) (R, error)) func(context.Context, tuple.T4[A0, A1, A2, A3]) (R, error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (R, error) {
		return f(ctx, a.A0, a.A1, a.A2, a.A3)
	}
}

// ToCARE_4_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_2[A0, A1, A2, A3, R0, R1 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, error)) func(context.Context, tuple.T4[A0, A1, A2, A3]) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx, a.A0, a.A1, a.A2, a.A3)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_4_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_3[A0, A1, A2, A3, R0, R1, R2 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, error)) func(context.Context, tuple.T4[A0, A1, A2, A3]) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx, a.A0, a.A1, a.A2, a.A3)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_4_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_4[A0, A1, A2, A3, R0, R1, R2, R3 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, error)) func(context.Context, tuple.T4[A0, A1, A2, A3]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx, a.A0, a.A1, a.A2, a.A3)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_4_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_5[A0, A1, A2, A3, R0, R1, R2, R3, R4 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, R4, error)) func(context.Context, tuple.T4[A0, A1, A2, A3]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx, a.A0, a.A1, a.A2, a.A3)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_4_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_4_6[A0, A1, A2, A3, R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, tuple.T4[A0, A1, A2, A3]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a tuple.T4[A0, A1, A2, A3]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx, a.A0, a.A1, a.A2, a.A3)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToCARE_5_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_0[A0, A1, A2, A3, A4 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) error) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (tuple.T0, error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T0, error) {
		err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
		return struct{}{}, err
	}
}

// ToCARE_5_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_1[A0, A1, A2, A3, A4, R any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R, error)) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (R, error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (R, error) {
		return f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
	}
}

// ToCARE_5_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_2[A0, A1, A2, A3, A4, R0, R1 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, error)) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_5_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_3[A0, A1, A2, A3, A4, R0, R1, R2 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, error)) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_5_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_4[A0, A1, A2, A3, A4, R0, R1, R2, R3 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, error)) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_5_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_5[A0, A1, A2, A3, A4, R0, R1, R2, R3, R4 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, R4, error)) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_5_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_5_6[A0, A1, A2, A3, A4, R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, tuple.T5[A0, A1, A2, A3, A4]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a tuple.T5[A0, A1, A2, A3, A4]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}

// ToCARE_6_0 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_0[A0, A1, A2, A3, A4, A5 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) error) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T0, error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T0, error) {
		err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
		return struct{}{}, err
	}
}

// ToCARE_6_1 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_1[A0, A1, A2, A3, A4, A5, R any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R, error)) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (R, error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (R, error) {
		return f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
	}
}

// ToCARE_6_2 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_2[A0, A1, A2, A3, A4, A5, R0, R1 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, error)) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T2[R0, R1], error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T2[R0, R1], error) {
		r0, r1, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
		return tuple.MkT2(r0, r1), err
	}
}

// ToCARE_6_3 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_3[A0, A1, A2, A3, A4, A5, R0, R1, R2 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, error)) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T3[R0, R1, R2], error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T3[R0, R1, R2], error) {
		r0, r1, r2, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
		return tuple.MkT3(r0, r1, r2), err
	}
}

// ToCARE_6_4 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_4[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, error)) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T4[R0, R1, R2, R3], error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T4[R0, R1, R2, R3], error) {
		r0, r1, r2, r3, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
		return tuple.MkT4(r0, r1, r2, r3), err
	}
}

// ToCARE_6_5 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_5[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3, R4 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, R4, error)) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T5[R0, R1, R2, R3, R4], error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T5[R0, R1, R2, R3, R4], error) {
		r0, r1, r2, r3, r4, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
		return tuple.MkT5(r0, r1, r2, r3, r4), err
	}
}

// ToCARE_6_6 returns a context-with-single argument, single-return-with-error function that calls f.
func ToCARE_6_6[A0, A1, A2, A3, A4, A5, R0, R1, R2, R3, R4, R5 any](f func(ctx context.Context, a0 A0, a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) (R0, R1, R2, R3, R4, R5, error)) func(context.Context, tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
	return func(ctx context.Context, a tuple.T6[A0, A1, A2, A3, A4, A5]) (tuple.T6[R0, R1, R2, R3, R4, R5], error) {
		r0, r1, r2, r3, r4, r5, err := f(ctx, a.A0, a.A1, a.A2, a.A3, a.A4, a.A5)
		return tuple.MkT6(r0, r1, r2, r3, r4, r5), err
	}
}
